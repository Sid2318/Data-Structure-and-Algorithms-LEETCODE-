// class Solution {
// public:
//     int candy(vector<int>& ratings) {
//         int prev;
//         int curr;
//         int next;
//         int candy = 0;
//         int sum = 0;

//         for(int i=0;i<ratings.size();i++){
//             if(i==0){
//                 prev =INT_MAX;
//                 next = ratings[i+1];
//             }
//             else if(i == ratings.size()-1){
//                 prev = ratings[i-1];
//                 next =INT_MAX;
//             }
//             else{
//                 prev = ratings[i-1];
//                 next = ratings[i+1];
//             }

//             curr = ratings[i];
//             if(curr> prev || curr>next){
//                 candy++;
//             }
//             else{
//                 candy--;
//             }

//             if(candy == 0){
//                 sum += (ratings.size()-1);
//             }
//             sum += candy;
//         }
        
//         return sum;
//     }
// };





// class Solution {
// public:
//     int candy(vector<int>& ratings) {
//         vector<int> left;
//         vector<int> right;
//         int sum =0;
//         int candy = 1;

//         for(int i=0;i<ratings.size()-1;i++){
//             if(ratings[i+1]>ratings[i]){
//                 candy++;
//                 left.push_back(candy);
//             }
//             else{
//                 left.push_back(1);
//             }
//         }
//         left.push_back(1);

//         right.push_back(1);
//         for(int i=1;i<ratings.size();i++){
//             if(ratings[i-1]>ratings[i]){
//                 candy++;
//                 right.push_back(candy);
//             }
//             else{
//                 right.push_back(1);
//             }
//         }
        
//         for(int i=0;i<ratings.size();i++){
//             sum += max(right[i],left[i]);
//         }
        
//         return sum;
//     }
// };



class Solution {
public:
    int candy(vector<int>& ratings) {
        int n = ratings.size();
        vector<int> left(n, 1);   // Initialize all to 1
        vector<int> right(n, 1);  // Initialize all to 1
        int sum = 0;

        // Left to Right Pass: Ensure right child gets more if needed
        for (int i = 1; i < n; i++) {
            if (ratings[i] > ratings[i - 1]) {
                left[i] = left[i - 1] + 1;
            }
        }

        // Right to Left Pass: Ensure left child gets more if needed
        for (int i = n - 2; i >= 0; i--) {
            if (ratings[i] > ratings[i + 1]) {
                right[i] = right[i + 1] + 1;
            }
        }

        // Take max of both to ensure fairness
        for (int i = 0; i < n; i++) {
            sum += max(left[i], right[i]);
        }

        return sum;
    }
};
