// class Solution {
// public:
//     long long distributeCandies(int n, int max) {
//         // int chid = 3;
//         long long ways = 0;
        
//         for(int i= 0;i<=max;i++){
//             for(int j=0;j<=max;j++){
//                 if(n-(i+j)<=max && n-(i+j)>-1){
//                     cout<<i<<" "<<j<<" "<<n-(i+j)<<endl;
//                     ways++;
//                 }
//             }
//         }

//         return ways;
//     }
// };

// class Solution {
// public:
//     long long distributeCandies(int n, int max) {
//         long long total = 0;

//         for (int i = 0; i <= min(n, max); i++) {
//             for (int j = 0; j <= min(n - i, max); j++) {
//                 int k = n - i - j;
//                 if (k >= 0 && k <= max)
//                     total++;
//             }
//         }

//         return total;
//     }
// };


class Solution {
public:
    long long combination(int n, int r) {
        if (r > n || r < 0) return 0;
        long long res = 1;
        for (int i = 1; i <= r; ++i) {
            res = res * (n - i + 1) / i;
        }
        return res;
    }

    long long distributeCandies(int n, int max) {
        long long totalWays = combination(n + 2, 2); // All non-negative (a+b+c = n)

        // Subtract ways where any one value is > max
        for (int i = 0; i < 3; i++) {
            totalWays -= combination(n - (max + 1) + 2, 2);
        }

        // Add back over-subtracted where two variables > max
        for (int i = 0; i < 3; i++) {
            totalWays += combination(n - 2 * (max + 1) + 2, 2);
        }

        // Subtract again where all three are > max (very rare case)
        totalWays -= combination(n - 3 * (max + 1) + 2, 2);

        return totalWays;
    }
};


