class Solution {
public:
    string answerString(string word, int numFriends) {
        if (numFriends == 1) return word;
        string res = "";
        for (int i = 0 ; i < word.size() ; i++) 
            res = max(res, word.substr(i, word.length() - numFriends + 1));
        return res;
    }
};


// class Solution {
// public:
//     string answerString(string word, int numFriends) {
//         // Find lexicographically largest substring of size n - numFriends + 1 or less starting at every index.

//         vector<string> s;
//         int substringlen = word.size() - numFriends + 1;
//         for(int i=0;i<word.size();i++){
//             // if(i+substringlen > word.size()){
//             //     s.push_back(word.substr(i,substringlen-i+1));
//             // }
//             // else{
//             //     s.push_back(word.substr(i,substringlen));
//             // }
//             int remaining = word.size() - i;
//             int len = min(substringlen, remaining);
//             s.push_back(word.substr(i, len));
//         }

//         // now find the largest
//         string max = s[0];
//         for(int i=0;i<s.size();i++){
//             if(max < s[i]){
//                 max = s[i];
//             }
//         }

//         return max;
//     }
// };
